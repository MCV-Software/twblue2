Coding At TWBlue
==================================

This is a document that explains a little bit about the dessign pattern we have chosen during development of this new iteration of tWBlue. As we want this application to follow as best as possible the `MVC <https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller>`_ pattern, it is important to read these rules before starting to contribute to TWBlue. If there are any issue that might breack any of the following suggestions, please open an `Issue in github <https://github.com/mcv-software/twblue2/issues>`_ so we can discuss the situation.

At TWBlue, we have 3 main folders inside the src folder, which is where the source code of the application live. Each folder is there so it might be easier to develop and test different parts of the application without making difficult for other services or graphical user interfaces to be added in the future. Here is a brief description of those folders and which part of the application's workflow is expected in each:

* model: The model is the part of TWBlue that handles all logic. Creating/saving configs for sessions, sound playback, retrieving new items for a specific service, ordering of items in the database, etc. Everything should be retrieved/updated via a call to the model. Normally, models should not be manipulated directly, but by using a controller. Models should never access any view or controller. In fact, models should be unaware of the object calling it and will be used only to retrieve and update data.
* views: Views are just the graphical user interface of the application. Every window, dialog or buffer should have its view defined in this folder. Views should use the Pubsub method to send event messages when certain action has happened, so controllers will react to user interaction. As models, views should not be aware of the object calling them. Views are only responsible to update data that is displayed to users, but logic in this data should be handled by controllers or, preferrably, models.
* controller: controllers are the glue between views and models. Normally, a controller will create its view and its model, then will define a list of pubsub events it listens to. When the view sends any event the controller is listening for, it will trigger a callback. Controllers will make calls to model on callbacks, and put the results in the view. It is desirable that controllers don't include logic themselves (logic would be in models), unless when there is no way for the model to do the logic part, or when it would be much more difficult to include a specific function in models.

We are aware this dessign pattern is rather difficult, mostly because for every component we basically will need to create three files (a view, model and controller). Although we strongly believe this will make TWBlue to be easily portable between different graphical user interfaces, services and platforms. Another advantage about this approach is that this will also make easier to write tests for model and controller parts of the application, which will help us to ensure TWBlue always works as expected.

Coding guidelines
------------------

Here are some guidelines we follow when making contributions to TWBlue in the hopes that this will help everyone out there who also would like to contribute to the project.

1. Models should never have access to controllers or views. In the rare occasion a model should communicate something to the view, the model should send a pubsub event to the controller, and the controller should react to it by inserting new data into the view. Although it would be much easier to have controllers handling this procedure by having a callback that retrieves data from the model and puts that data somewhere in the view.
2. Views should never have access to controllers. As in the last example, views should send pubsub events to controllers that are subscribed to them, and controllers should react to events and do the model/view part.
3. Only controllers should be able to subscribe to pubsub events. It would be best to define a function called subscribe_events in any controller needing to define callbacks, and another function that unsubscribes called unsubscribe_events. We need to make sure both functions are called. It is important to call to unsubscribe_events after a controller has been used, right before the object will be deleted, so we will inform pubsub we no longer will accept callbacks on the controller.
